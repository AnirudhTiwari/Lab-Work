not_list = ['3g4s', '1adh', '1baa', '1a4k', '1abk','2w8p', '1tj7', '1z5h', '1p9h', '1dve', '1aon', '1fjg', '1jfw', '1nkq', '1byr', '1abz','1t6t','1c21', '1a18', '1bal', '1am4', '1vea', '1foe', '1t11', '1hci', '3ci0']


if pdb_id[:4].lower()==pdb_file[:4].lower()  and pdb_file not in not_list and pdb_file not in visited_list and int(pdb_id[7] + pdb_id[8])==2:

				flag = 1
				var_1 = open(path+pdb_path, 'r')
				frags = int(pdb_id[11] + pdb_id[12])
				var_2 = open(path+pdb_path, 'r')
				chain = pdb_id[18]
				domains = int(pdb_id[7] + pdb_id[8])

				for r in req_chains:
					if r[:4]==pdb_id[:4].lower() and chain.lower()==r[4].lower():					
						if frags==0:
							visited_list.append(pdb_file)
							domain_boundary = pdb_id[14:].strip()

							cords_list, realId_list = getCordsList(var_1,chain)

							x = np.asarray(cords_list)

							file_counter+=1

							simulated_domains = 1

							try:
								radius = radius_of_gyration.radius_of_gyration(var_2, chain)
							except:
									print "Error hai isme ", pdb_id
							length = len(cords_list)
							val, segmented = getCathDict(domain_boundary, domains)

							F_values = []
							k_values = []
							S_values = {}
							alpha_values = {}
							i = 1

							print pdb_id[:4] + ", " + chain +  ", " + str(domains) + ", " + str(length),
							while simulated_domains!=7:
								km = KMeans(n_clusters=simulated_domains).fit(x)
								labels_km = km.labels_
								centers_km = km.cluster_centers_

								F = 0.0

								S = 0.0
								

								for s in range(0,simulated_domains,1):
									S = S + calculateDistortion(centers_km, labels_km, s, cords_list)

								S_values[i]=S		
								simulated_domains+=1

								i+=1

							for k in range(2, 7):
								if k==2:
									alpha_values[k]=0.75

								else:
									alpha_values[k]=alpha_values[k-1] + (1-alpha_values[k-1])/6	

							for k in range(1, 7):
								if k==1:
									F_values.append(1)

								else:
									F_values.append((S_values[k]/(alpha_values[k]*S_values[k-1]*1.0)))
							

			